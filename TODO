
- check listening port if already taken (E.g. controller running on same port nothing happen)
- Extend JSONPath implementation using jsawk https://github.com/micha/jsawk
	-> see also http://www.sitepen.com/blog/2008/07/16/jsonquery-data-querying-beyond-jsonpath/
- Add filter functions using JSONPath with AND, OR, XOR, NOT combinations of path - kinda biz rules
	-> _view/<view>/_all_docs
	-> _changes
	-> _all_docs
- ID aliases via ?id=http://somethingelse.org/id
- Add links / relationships creation (association, aggregation, composition)
- Add GET /doc/_fields?query=json-path&jpaths=TRUE ...
- Add PUT/DELETE /doc/_fields?query=json-path
- Add view helper function json_path() and jpaths(node)
- HTTP basic and ACLs and Cookies
- Filters on views and changes
- SQLite related:
  - Add sqlite3 code bundle in distribution (amalgamated SQLite source code) - see http://www.sqlite.org/amalgamation.html
  - Add /domain/application/ prefix to DB, view and documents
  - Attach multiple DBs into one (db, attachments, views...) into application bundle
    see also http://www.gtkpod.org/libgpod/docs/libgpod-The-Itdb-iTunesDB-structure.html
- Configuration in JSON (kill XML conf) and allow /_config GET/PUT/DELETE on settings and hot-reload
- Add Geocouch / GeoJSON support - see http://vmx.cx/cgi-bin/blog/index.cgi/geocouch-the-future-is-now%3A2010-05-03%3Aen%2CCouchDB%2CPython%2CErlang%2Cgeo
  http://vmx.cx/cgi-bin/blog/index.cgi/geocouch-the-future:2009-12-20:en,CouchDB,Python,geo and http://www.gaia-gis.it/spatialite/
  for sample API see also http://api.freebase.com/api/service/geosearch?help
- Add dates search (see Date Grabber mysql date time functions - e.g. periods, easter 2010 etc etc.)
- Add JSQL / Google Refine Expression language support to transform metadata combined with map/reduce
  set/delete/update of fields from views (E.g. refine kind of data quality scenario to group rows and rename column etc.)
- Add provenance info who (user or IP) what (CRUD) when(already in tm) and perhaps add _attribution
  structure to contain/track all user-agent client details and headers if required/needed. E.g. all environment vars
  It would be important to be in main obj JSON so views and indexes can be generted later E.g. who did what when BI etc.
- Low evel HTTP
  - Use proper HTTP pareser E.g. https://github.com/kazuho/picohttpparser
- Software Dev
  - rework soource code to have more pluggable indexes/modules/handlers as needed - see for example
    how couchdb does with hanlders http://vmx.cx/couchdb/tutorial/indexer.html
    a good starting point is to port src/httpd/request.c and httpd.c to APR or libsoup see
    http://library.gnome.org/devel/libsoup/stable/libsoup-server-howto.html. Bearing in mind
    APR may be preferred to libsoup for server stuff.
  - use libcurl instead of libsoup for HTTP/S client requests in src/lib/dupin_js.c
  - remove libxml dependency and stick to JSON config (or INI/TXT).
- Caching:
  - Fix _all_docs when passing "include_links" and links are changed/added; so ETag should reflect that
- Add simple triggers/handlers at start view map/reduce and finish to generate SQLite indexes
  or proper INSERT/DELETE/UPDATE statements to be used by API E.g. Portable Listings.
- Look into using json-glib Serializable Interface to build a configurable layer on top of
  Dupin to customize JSON output structires. Or input CRUD E.g. profiles to set/get values using
  controlled lists etc.
- Think of a kind of snap-shot generator of SQLite databases with a specific version/tag so other
  applications can start using the copy for read-only purposes for example. See also ideas here
  http://search.cpan.org/~adamk/ ORLite mirror and migrate related modules
- When _compact database and linkbase should copy over the very first revision _created value
  as _published to the latest record, unless already set. This allows to know when record was
  originally "published" put into the system.
- Critical:
  - Add validation of IDs and REVs at least
- HTTP
  - Add Connection: keep-alive and Transfer-Encoding: chunked on input
- Bulk API
  - Add "all_or_nothing" to rollback/commit super transaction
- Add dot-notation parsing to linkbase "rel" so we can define "nested relationships"; incuding serialisation.
- PortableListings
  - Implement listFields, listWeblinks and listRelationships
  - Add filtered: true/false and ordered: true/false
  - Add support for ?id={id}
- Add SQLite ATTACH/DETACH to linkbase and attachment database so can run queries cross docs, links and attachments.
- Add support / check for multiple CGI query parameters i.e. AND; while comma separated are ORs
- Add _provider { lang:, priority:, authority: ... } and update ID generator if set
- Add new ID generator and shortener base36 assigining 3 digits to lang, 1 digit to priority, 6 digits to authority, 3 digits for type and j-digits for ID e.g.
- Add some kind of 'application/database+sqlite+dupin' mimetype to return a DB bundle/backup/dump useful for reimport, export and replication
- Linkbases
  - Add "_role" to disambiguate role of target in context for same entity; or rename "_tag" to "_role" due it is empty by default
  - Add "_hreflang"
  - Add "_position" as number to sort elements in relationship (not for links) and allow to sort by it when listing relationship members
  - Add "_primary" flag
  - Add check that same href+rel+role+hreflang can be set between two entities when rel="alternate" (default)
- Attachments
  - Add ?attachments=true support
- Record expiring
  - How to revoke expiring? Set expire to zero? or delete field/s? What about if expire at and expir after are both set?
- On database deletion make sure any changes continuous thread is stopped to avoid "database XXXX flagged for deletion but can't free it due ref is 1"
